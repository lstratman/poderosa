<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        8gDt7e0AJCQkAOnp6QAuLy8A5eXlAOHh4QDd3d0A2dnZANXV1QDR0dEAycnJAMXFxQDBwcEAurq6ALOz
        swA8Pz4AREVEADIzMgA1NzYAODs6AEBCQQBHSUgASk1MAE5RTwBSVFMAVVhXAFhcWgAoKCgAKysrAD09
        PQDNzc0AOTk5AJSXlgA6OzoAOz48APHx8QDu7u4A7OzsACMjIwDq6uoAJSUlAObm5gDk5OQA4uLiAC8w
        MADg4OAAMzQzAN7e3gDc3NwA2traADo9OwDY2NgAPj8+ANbW1gDU1NQAQkNCAENEQwDQ0NAAQkVEAENG
        RQDOzs4ARUZFAMzMzABGR0cAysrKAEhKSQDIyMgAS05NAMbGxgDExMQAwsLCAMDAwAC+vr4Avb29AFld
        WwC7u7sAubm5ALe3twC2trYAsrKyALCwsACtra0AKioqAC4uLgAxMjEANTU1ADY2NgA2NzcANzg3ADg4
        OAA4OjkAOTo6ADk7OwA7OzsAPD08ADw+PQA9Pz8AP0FAAEBDQgBBQkIAREdFAEVJRwBHSEcASUxLAEpL
        SwBNUE8AT1FQAE9SUQBRU1IAU1VTAFNWVABUV1YAVllXAFdbWQB/goEAEBERAN/g3wDX2NgA1tfXACss
        KwAsLCwALy8vAM3OzgAvMTAAMDAwADAxMAAxMTEAMTIyADIyMgAyMzMAMjQzADMzMwAzNDQANDQ0ADQ1
        NQA1NjUANTY2ADY3NgA3ODgAODk4ADg5OQA4OzkAOTo5ADk7OgA6OzsAOjw7ADs8OwA7PTwAPD48ADw9
        PQA9Pj0APT8+AD8/PwA+QD8AQEFAAEBBQQBAQ0EAQUJBAEFDQgBCREMAQkVDAENERABDRUQAQ0ZEAERG
        RQBER0YARUdGAEVIRwBGSEcARklHAEZJSABHSkgAR0pJAEhLSQBIS0oASUxKAEpMSwBKTUsAS01MAEtO
        TABMTk0ATE9NAExQTgBNT04ATlBPAFBTUgBRU1MAU1ZVAFRXVQBVWFYAVllYAFZaWABXWlkAWFtaAFlc
        WgBZXFsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        AAD///////8AAP///////wAA////////AAA=
</value>
  </data>
</root>